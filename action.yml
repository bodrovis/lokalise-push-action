name: 'Push to Lokalise'
description: 'GitHub action to upload changed translation files in the base language from your GitHub repository to Lokalise TMS.'
author: 'Lokalise Group, Ilya Krukowski'
inputs:
  api_token:
    description: 'API token for Lokalise with read/write permissions'
    required: true
    secret: true
  project_id:
    description: 'Project ID for Lokalise'
    required: true
  base_lang:
    description: 'Base language (e.g., en, fr_FR)'
    required: true
    default: 'en'
  translations_path:
    description: 'Paths to translation files'
    required: true
    default: |
      locales
  file_format:
    description: 'Format of the translation files (e.g., json). Find all supported file formats at https://developers.lokalise.com/reference/api-file-formats'
    required: true
    default: 'json'
  additional_params:
    description: 'Additional parameters for Lokalise CLI on push. Find all supported options at https://github.com/lokalise/lokalise-cli-2-go/blob/main/docs/lokalise2_file_upload.md'
    required: false
    default: ''
  max_retries:
    description: 'Maximum number of retries on rate limit errors'
    required: false
    default: 3
  sleep_on_retry:
    description: 'Number of seconds to sleep before retrying'
    required: false
    default: 1
permissions:
  contents: write
branding:
  icon: 'upload-cloud'
  color: 'green'

runs:
  using: "composite"
  steps:
  - name: Run Go Action
    id: run-go-action
    env:
      K1: ${{ inputs.additional_params }}
      K2: ${{ inputs.project_id }}
      K3: ${{ inputs.base_lang }}
    shell: bash
    run: |
      DEMO_SCRIPT_PATH="${{ github.action_path }}/bin/demoscript"
      chmod +x "$DEMO_SCRIPT_PATH"

      output=$("$DEMO_SCRIPT_PATH")
        
      echo "output_variable_name=$output" >> $GITHUB_OUTPUT

  - name: Verify GITHUB_OUTPUT
    shell: bash
    run: |
      echo "Captured output variable:"
      echo "${{ steps.run-go-action.outputs.output_variable_name }}"

    # - name: Set translation paths
    #   id: translation-paths
    #   shell: bash
    #   run: |
    #     > paths.txt
    #     translations_path="${{ inputs.translations_path }}"
    #     while IFS= read -r path; do
    #       path=$(echo "$path" | xargs)
    #       if [ -n "$path" ]; then
    #         echo "./${path}/${{ inputs.base_lang }}/**/*.${{ inputs.file_format }}" >> paths.txt
    #       fi
    #     done <<< "$translations_path"

    # - name: Get changed files
    #   id: changed-files
    #   uses: tj-actions/changed-files@v45
    #   with:
    #     files_from_source_file: paths.txt
    #     separator: ','

    # - name: Check if this is the first run on the branch
    #   if: steps.changed-files.outputs.any_changed == 'false'
    #   id: check-first-run
    #   shell: bash
    #   run: |
    #     set -e

    #     if git rev-parse "refs/tags/lokalise-upload-complete" >/dev/null 2>&1; then
    #       echo "first_run=false" >> $GITHUB_OUTPUT
    #     else
    #       echo "first_run=true" >> $GITHUB_OUTPUT
    #     fi

    # - name: Find all translation files
    #   if: steps.changed-files.outputs.any_changed == 'false' && steps.check-first-run.outputs.first_run == 'true'
    #   id: find-files
    #   shell: bash
    #   run: |
    #     set -e

    #     translations_path="${{ inputs.translations_path }}"
    #     base_lang="${{ inputs.base_lang }}"
    #     file_format="${{ inputs.file_format }}"

    #     paths=()
    #     while IFS= read -r path; do
    #       path=$(echo "$path" | xargs)
    #       if [ -n "$path" ]; then
    #         if [ -d "${path}/${base_lang}" ]; then
    #           paths+=("${path}/${base_lang}")
    #         else
    #           echo "Directory ${path}/${base_lang} does not exist."
    #         fi
    #       fi
    #     done <<< "$translations_path"
    
    #     if [ ${#paths[@]} -eq 0 ]; then
    #       echo "No translation paths provided."
    #       echo "has_files=false" >> $GITHUB_OUTPUT
    #       exit 0
    #     fi
    
    #     mapfile -d '' -t ALL_FILES_ARRAY < <(find "${paths[@]}" -name "*.${file_format}" -type f -print0)

    #     if [ ${#ALL_FILES_ARRAY[@]} -eq 0 ]; then
    #       echo "No translation files found."
    #       echo "has_files=false" >> $GITHUB_OUTPUT
    #     else
    #       ALL_FILES=$(printf "%s," "${ALL_FILES_ARRAY[@]}")
    #       ALL_FILES="${ALL_FILES%|}"
          
    #       echo "ALL_FILES=$ALL_FILES" >> $GITHUB_OUTPUT
    #       echo "has_files=true" >> $GITHUB_OUTPUT
    #     fi

    # - name: Install Lokalise CLI
    #   if: steps.find-files.outputs.has_files == 'true' || steps.changed-files.outputs.any_changed == 'true'
    #   shell: bash
    #   run: |
    #     set -e
    #     chmod +x "${{ github.action_path }}/src/scripts/install_lokalise_cli.sh"
    #     "${{ github.action_path }}/src/scripts/install_lokalise_cli.sh"

    # - name: Push translation files to Lokalise
    #   if: steps.find-files.outputs.has_files == 'true' || steps.changed-files.outputs.any_changed == 'true'
    #   shell: bash
    #   env:
    #     CLI_ADD_PARAMS: ${{ inputs.additional_params }}
    #     MAX_RETRIES: ${{ inputs.max_retries }}
    #     SLEEP_TIME: ${{ inputs.sleep_on_retry }}
    #     BASE_LANG: ${{ inputs.base_lang }}
    #   run: |
    #     set -e

    #     if [ "${{ steps.check-first-run.outputs.first_run }}" == "true" ]; then
    #       ALL_FILES="${{ steps.find-files.outputs.ALL_FILES }}"
    #     else
    #       ALL_CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
    #     fi

    #     if [ -z "${ALL_FILES}" ] && [ -z "${ALL_CHANGED_FILES}" ]; then
    #       echo "No files to upload."
    #       exit 0
    #     fi
        
    #     chmod +x "${{ github.action_path }}/src/scripts/lokalise_upload.sh"

    #     set +e
    #     echo "${ALL_FILES:-$ALL_CHANGED_FILES}" | tr ',' '\n' | xargs -P 6 -I {} bash "${{ github.action_path }}/src/scripts/lokalise_upload.sh" "{}" "${{ inputs.project_id }}" "${{ inputs.api_token }}"
    #     xargs_exit_code=$?
    #     set -e

    #     if [ $xargs_exit_code -ne 0 ]; then
    #       echo "File upload failed"
    #       exit 1
    #     fi

    # - name: Mark Lokalise upload as complete
    #   if: steps.check-first-run.outputs.first_run == 'true'
    #   shell: bash
    #   run: |
    #     set -e

    #     git config --global user.name "${GITHUB_ACTOR}"
    #     git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
    #     if ! git rev-parse "refs/tags/lokalise-upload-complete" >/dev/null 2>&1; then
    #       git tag -a "lokalise-upload-complete" -m "First Lokalise upload complete"
    #       git push origin "lokalise-upload-complete"
    #     else
    #       echo "Tag 'lokalise-upload-complete' already exists."
    #     fi